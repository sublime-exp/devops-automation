version: '3.8'

services:
  jenkins:
    build: .
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    user: root

volumes:
  jenkins_home:

#use the generated password in the container logs to enter on localhost:8080
#craate admin user: admin:admin
#dashboard -> manage jenkins -> tools configuration -> add maven 3.9.9 from apache automated
#new element: devops-automation (pipeline)
#set github url: https://github.com/sublime-exp/devops-automation
#add github hook trigger for GITScm polling
#Go to your GitHub repository → Settings → Webhooks.
#Add a webhook:
#Payload URL: http://<your-jenkins-url>/github-webhook/
#Content type: application/json
#Events: Choose “Just the push event” (or more if needed).

#install docker pipeline plugin..
#kubectl config view --raw > kubeconfig.yaml to extract the kube config file and upload it as credentials in
# Steps to Configure Jenkins for Kubernetes Deployment
#Install the Kubernetes CLI Plugin:
#Navigate to Manage Jenkins → Manage Plugins → Available.
#Search for Kubernetes CLI Plugin and install it.
#Restart Jenkins if prompted.
#Add Kubernetes Credentials:
#Go to Manage Jenkins → Credentials → (select appropriate domain).
#Click Add Credentials.
#Choose Kind: Secret file.
#Upload your kubeconfig file.
#Assign an ID (e.g., kubeconfig-id) for reference in your pipeline.

#pipeline {
#    agent any
#    tools {
#        maven "M3"
#    }
#    stages {
#        stage('Build Maven') {
#            steps {
#                <pipeline syntax snippet for checkout>
#                sh "mvn clean install"
#            }
#        }
#        stage('Build Doker Image') {
#            steps {
#                script {
#                    sh "docker build -t ivakis/devops-integration ."
#                }
#            }
#        },
#        stage('Push Image') {
#            steps {
#                script {
#                     <create secret from secret text give it credentials id as 'dockerhub-pwd'>
#                     <pipeline syntax snippet for withCredentials then from secret text name the variable 'dockerhubpwd' and add it>
#                }
#            }
#        }
#    }
#}
#

